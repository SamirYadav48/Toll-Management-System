
package com.tollmanagementsystem.view;

import java.awt.CardLayout;
import com.tollmanagementsystem.controller.algorithms.SelectionSort;
import com.tollmanagementsystem.controller.algorithms.BinarySearch;
import com.tollmanagementsystem.controller.datastructure.CustomQueue;
import com.tollmanagementsystem.model.TollModel;
import com.tollmanagementsystem.util.ValidationUtil;
import java.util.LinkedList;
import java.util.List;
import javax.swing.*;
import java.awt.Color;
import javax.swing.table.DefaultTableModel;





/**
 *
 * @author samiryadav
 * LMUID: 23048505
 */
public class TollManagementSystem extends javax.swing.JFrame {
    private List<TollModel> tollList;
    private java.awt.CardLayout cardLayout;
    private final ValidationUtil validationUtil;
    private final Color errorColor = new Color(255, 51, 0);
    private final Color greenColor = new Color(34, 139, 34);
    
    
    

    /**
     * Creates new form TollManagementSystem
     */
    public TollManagementSystem() {
        setResizable(false);
        initComponents();
        initializeData();
        validationUtil = new ValidationUtil(); //Initializing v
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPages = new javax.swing.JPanel();
        pnlTitle = new javax.swing.JPanel();
        btnLogOut = new javax.swing.JButton();
        lblTitlePages = new javax.swing.JLabel();
        jtpPages = new javax.swing.JTabbedPane();
        jpHomePage = new javax.swing.JPanel();
        pnlContext = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taInformation = new javax.swing.JTextArea();
        lblHomeImage = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        pnlFooter = new javax.swing.JPanel();
        lblTitle3 = new javax.swing.JLabel();
        lblPhrase = new javax.swing.JLabel();
        jpDashboard = new javax.swing.JPanel();
        jspTableContents = new javax.swing.JScrollPane();
        jtInformation = new javax.swing.JTable();
        pnlTextFields = new javax.swing.JPanel();
        txtFldLicenseNumber = new javax.swing.JTextField();
        txtFldCitizenName = new javax.swing.JTextField();
        txtFldCitizenshipNumber = new javax.swing.JTextField();
        txtFldVehicleNumber = new javax.swing.JTextField();
        txtFldAddress = new javax.swing.JTextField();
        txtFldState = new javax.swing.JTextField();
        txtFldPlazaName = new javax.swing.JTextField();
        txtFldPlazaLocation = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblErrorMsgLicenseNumber = new javax.swing.JLabel();
        lblErrorMsgCitizenName = new javax.swing.JLabel();
        lblErrorMsgCitizenshipNumber = new javax.swing.JLabel();
        lblErrorMsgVehicleNumber = new javax.swing.JLabel();
        lblErrorMsgPlazaName = new javax.swing.JLabel();
        lblErrorMsgPlazaLocation = new javax.swing.JLabel();
        lblErrorMsgState = new javax.swing.JLabel();
        lblErrorMsgAddress = new javax.swing.JLabel();
        txtFldVehicleCategory = new javax.swing.JTextField();
        lblErrorMsgVehicleCategory = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtFldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnSortByCitizenshipNumber = new javax.swing.JButton();
        lblLogo = new javax.swing.JLabel();
        pnlLoginPage = new javax.swing.JPanel();
        pnlLoginDetails = new javax.swing.JPanel();
        txtFldUserName = new javax.swing.JTextField();
        pwdFldPassword = new javax.swing.JPasswordField();
        lblLogin = new javax.swing.JLabel();
        btnSignIn = new javax.swing.JButton();
        lblForgetPassword = new javax.swing.JLabel();
        lblPasswordImage = new javax.swing.JLabel();
        lblUserImage = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        pnlImage = new javax.swing.JPanel();
        lblLoginImage = new javax.swing.JLabel();
        pnlLoadingPage = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        lblBackgroundImage = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        lblLoadingBar = new javax.swing.JLabel();

        pnlPages.setMaximumSize(new java.awt.Dimension(1150, 620));
        pnlPages.setPreferredSize(new java.awt.Dimension(1150, 620));
        pnlPages.setSize(new java.awt.Dimension(1150, 620));

        pnlTitle.setBackground(new java.awt.Color(54, 69, 79));

        btnLogOut.setBackground(new java.awt.Color(54, 69, 79));
        btnLogOut.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        btnLogOut.setForeground(new java.awt.Color(255, 255, 255));
        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        lblTitlePages.setBackground(new java.awt.Color(255, 255, 255));
        lblTitlePages.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitlePages.setForeground(new java.awt.Color(255, 255, 255));
        lblTitlePages.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitlePages.setText("                                            Toll Tax Management System");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addComponent(lblTitlePages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(btnLogOut))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitlePages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnLogOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jtpPages.setBackground(new java.awt.Color(204, 204, 204));

        jpHomePage.setBackground(new java.awt.Color(255, 255, 255));

        pnlContext.setBackground(new java.awt.Color(54, 69, 79));

        taInformation.setBackground(new java.awt.Color(54, 69, 79));
        taInformation.setColumns(20);
        taInformation.setForeground(new java.awt.Color(255, 255, 255));
        taInformation.setRows(5);
        taInformation.setText("PATHPAY brings together innovative technologies and advanced techniques\nto provide a seamless, centralized toll management system. Our integrated\nsolution not only optimizes toll operations but also prioritizes road safety, \nensuring an enhanced driving experience on expressways.\n\nToll collection serves as a vital means to fund road infrastructure,particularly\nfor highways. It helps recover the capital invested in building roads while \ncovering the costs associated with their repair and maintenance. Moreover, \ntoll systems play a crucial role in reducing the financial burden on local\ntaxpayers by directly charging road users for their use of the infrastructure.");
        jScrollPane1.setViewportView(taInformation);

        lblHomeImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/home 1.png"))); // NOI18N

        lblTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("Revolutionizing Toll Management for a Safer, Smoother Journey");

        javax.swing.GroupLayout pnlContextLayout = new javax.swing.GroupLayout(pnlContext);
        pnlContext.setLayout(pnlContextLayout);
        pnlContextLayout.setHorizontalGroup(
            pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(lblHomeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContextLayout.createSequentialGroup()
                        .addComponent(lblTitle1)
                        .addGap(390, 390, 390))))
        );
        pnlContextLayout.setVerticalGroup(
            pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContextLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlContextLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHomeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlContextLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pnlFooter.setBackground(new java.awt.Color(245, 245, 220));

        lblTitle3.setBackground(new java.awt.Color(245, 245, 220));
        lblTitle3.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitle3.setForeground(new java.awt.Color(128, 0, 32));
        lblTitle3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle3.setText("Our Cutting-Edge Toll Management System: Simplified for Maximum Efficiency");

        lblPhrase.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblPhrase.setForeground(new java.awt.Color(128, 0, 32));
        lblPhrase.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhrase.setText("INNOVATIVE TOLLING TECHNOLOGIES");

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblPhrase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFooterLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPhrase)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpHomePageLayout = new javax.swing.GroupLayout(jpHomePage);
        jpHomePage.setLayout(jpHomePageLayout);
        jpHomePageLayout.setHorizontalGroup(
            jpHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlContext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpHomePageLayout.setVerticalGroup(
            jpHomePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpHomePageLayout.createSequentialGroup()
                .addComponent(pnlContext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jtpPages.addTab("Home", jpHomePage);

        jtInformation.setBackground(new java.awt.Color(54, 69, 79));
        jtInformation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "License Number", "Citizen Name", "Citizenship No.", "Vechicle Number", "Toll Plaza Location", "State", "Toll Plaza Name", "Vehicle Category", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtInformation.getTableHeader().setReorderingAllowed(false);
        jspTableContents.setViewportView(jtInformation);
        if (jtInformation.getColumnModel().getColumnCount() > 0) {
            jtInformation.getColumnModel().getColumn(0).setResizable(false);
            jtInformation.getColumnModel().getColumn(1).setResizable(false);
            jtInformation.getColumnModel().getColumn(2).setResizable(false);
            jtInformation.getColumnModel().getColumn(3).setResizable(false);
            jtInformation.getColumnModel().getColumn(4).setResizable(false);
            jtInformation.getColumnModel().getColumn(5).setResizable(false);
            jtInformation.getColumnModel().getColumn(6).setResizable(false);
            jtInformation.getColumnModel().getColumn(7).setResizable(false);
            jtInformation.getColumnModel().getColumn(8).setResizable(false);
        }

        pnlTextFields.setBackground(new java.awt.Color(54, 69, 79));

        txtFldLicenseNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "License Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldLicenseNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLicenseNumberActionPerformed(evt);
            }
        });

        txtFldCitizenName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Citizen Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldCitizenName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldCitizenNameActionPerformed(evt);
            }
        });

        txtFldCitizenshipNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Citizenship Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldCitizenshipNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldCitizenshipNumberActionPerformed(evt);
            }
        });

        txtFldVehicleNumber.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldVehicleNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldVehicleNumberActionPerformed(evt);
            }
        });

        txtFldAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldAddressActionPerformed(evt);
            }
        });

        txtFldState.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "State", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldStateActionPerformed(evt);
            }
        });

        txtFldPlazaName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Toll Plaza Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldPlazaName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldPlazaNameActionPerformed(evt);
            }
        });

        txtFldPlazaLocation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Toll Plaza Location", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldPlazaLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldPlazaLocationActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnAdd.setText("ADD DETAILS");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setToolTipText("");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblErrorMsgLicenseNumber.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgCitizenName.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgCitizenshipNumber.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgVehicleNumber.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgPlazaName.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgPlazaLocation.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgState.setForeground(new java.awt.Color(255, 255, 255));

        lblErrorMsgAddress.setForeground(new java.awt.Color(255, 255, 255));

        txtFldVehicleCategory.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Vehicle Category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13))); // NOI18N
        txtFldVehicleCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldVehicleCategoryActionPerformed(evt);
            }
        });

        lblErrorMsgVehicleCategory.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlTextFieldsLayout = new javax.swing.GroupLayout(pnlTextFields);
        pnlTextFields.setLayout(pnlTextFieldsLayout);
        pnlTextFieldsLayout.setHorizontalGroup(
            pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblErrorMsgLicenseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlTextFieldsLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtFldLicenseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFldState, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorMsgState, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFldCitizenName, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgCitizenName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                                .addComponent(txtFldCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtFldVehicleNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                                .addComponent(lblErrorMsgCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblErrorMsgVehicleNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                                .addComponent(lblErrorMsgVehicleCategory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(187, 187, 187))))
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addComponent(txtFldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtFldVehicleCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblErrorMsgPlazaName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFldPlazaName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFldPlazaLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgPlazaLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlTextFieldsLayout.setVerticalGroup(
            pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTextFieldsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFldCitizenName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldLicenseNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldVehicleNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldPlazaName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFldPlazaLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlTextFieldsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblErrorMsgLicenseNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgCitizenName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgCitizenshipNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgVehicleNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblErrorMsgPlazaLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorMsgPlazaName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFldVehicleCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtFldState, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtFldAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlTextFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblErrorMsgState, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblErrorMsgAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblErrorMsgVehicleCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13))
        );

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText(" Vehicle Information");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(54, 69, 79), 2, true));

        txtFldSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        btnSearch.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSortByCitizenshipNumber.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSortByCitizenshipNumber.setText("Sort by Citizenship Number");
        btnSortByCitizenshipNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnSortByCitizenshipNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByCitizenshipNumberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpDashboardLayout = new javax.swing.GroupLayout(jpDashboard);
        jpDashboard.setLayout(jpDashboardLayout);
        jpDashboardLayout.setHorizontalGroup(
            jpDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTextFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpDashboardLayout.createSequentialGroup()
                .addComponent(jspTableContents, javax.swing.GroupLayout.PREFERRED_SIZE, 1164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jpDashboardLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtFldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addComponent(btnSortByCitizenshipNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpDashboardLayout.setVerticalGroup(
            jpDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDashboardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDashboardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFldSearch, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(btnSortByCitizenshipNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspTableContents, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlTextFields, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jtpPages.addTab("Dashboard", jpDashboard);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/logo.png"))); // NOI18N

        javax.swing.GroupLayout pnlPagesLayout = new javax.swing.GroupLayout(pnlPages);
        pnlPages.setLayout(pnlPagesLayout);
        pnlPagesLayout.setHorizontalGroup(
            pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagesLayout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jtpPages)
        );
        pnlPagesLayout.setVerticalGroup(
            pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPagesLayout.createSequentialGroup()
                .addGroup(pnlPagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtpPages))
        );

        pnlLoginPage.setMaximumSize(new java.awt.Dimension(1150, 620));
        pnlLoginPage.setPreferredSize(new java.awt.Dimension(1150, 620));
        pnlLoginPage.setSize(new java.awt.Dimension(1150, 620));

        pnlLoginDetails.setBackground(new java.awt.Color(54, 69, 79));
        pnlLoginDetails.setForeground(new java.awt.Color(255, 255, 255));

        txtFldUserName.setBackground(new java.awt.Color(54, 69, 79));
        txtFldUserName.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtFldUserName.setForeground(new java.awt.Color(255, 255, 255));
        txtFldUserName.setText("admin");
        txtFldUserName.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Username", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        txtFldUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldUserNameActionPerformed(evt);
            }
        });

        pwdFldPassword.setBackground(new java.awt.Color(54, 69, 79));
        pwdFldPassword.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        pwdFldPassword.setForeground(new java.awt.Color(255, 255, 255));
        pwdFldPassword.setText("password");
        pwdFldPassword.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2), "Password", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 13), new java.awt.Color(255, 255, 255))); // NOI18N
        pwdFldPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldPasswordActionPerformed(evt);
            }
        });

        lblLogin.setBackground(new java.awt.Color(0, 0, 0));
        lblLogin.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblLogin.setForeground(new java.awt.Color(255, 255, 255));
        lblLogin.setText("LOGIN");

        btnSignIn.setBackground(new java.awt.Color(54, 69, 79));
        btnSignIn.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        btnSignIn.setForeground(new java.awt.Color(255, 255, 255));
        btnSignIn.setText("Sign In");
        btnSignIn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignInActionPerformed(evt);
            }
        });

        lblForgetPassword.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        lblForgetPassword.setForeground(new java.awt.Color(255, 255, 255));
        lblForgetPassword.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblForgetPassword.setText("Forgot Password?");

        lblPasswordImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/password.png"))); // NOI18N

        lblUserImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/user.png"))); // NOI18N

        lblMessage.setBackground(new java.awt.Color(255, 255, 255));
        lblMessage.setForeground(new java.awt.Color(255, 255, 255));
        lblMessage.setText("Enter your credentials to access account");

        javax.swing.GroupLayout pnlLoginDetailsLayout = new javax.swing.GroupLayout(pnlLoginDetails);
        pnlLoginDetails.setLayout(pnlLoginDetailsLayout);
        pnlLoginDetailsLayout.setHorizontalGroup(
            pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                            .addGap(117, 117, 117)
                            .addComponent(lblMessage))
                        .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                                    .addComponent(lblUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtFldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                                    .addComponent(lblPasswordImage, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pwdFldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblForgetPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(btnSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(177, Short.MAX_VALUE))
        );
        pnlLoginDetailsLayout.setVerticalGroup(
            pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(lblLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMessage)
                .addGap(18, 18, 18)
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoginDetailsLayout.createSequentialGroup()
                        .addComponent(lblUserImage, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGroup(pnlLoginDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pwdFldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLoginDetailsLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(lblPasswordImage, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblForgetPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlImage.setBackground(new java.awt.Color(153, 153, 153));

        lblLoginImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/login.png"))); // NOI18N

        javax.swing.GroupLayout pnlImageLayout = new javax.swing.GroupLayout(pnlImage);
        pnlImage.setLayout(pnlImageLayout);
        pnlImageLayout.setHorizontalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlImageLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblLoginImage, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlImageLayout.setVerticalGroup(
            pnlImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImageLayout.createSequentialGroup()
                .addComponent(lblLoginImage, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLoginPageLayout = new javax.swing.GroupLayout(pnlLoginPage);
        pnlLoginPage.setLayout(pnlLoginPageLayout);
        pnlLoginPageLayout.setHorizontalGroup(
            pnlLoginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginPageLayout.createSequentialGroup()
                .addComponent(pnlLoginDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLoginPageLayout.setVerticalGroup(
            pnlLoginPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoginPageLayout.createSequentialGroup()
                .addComponent(pnlImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(pnlLoginDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1160, 620));
        setMinimumSize(new java.awt.Dimension(1160, 620));
        setSize(new java.awt.Dimension(1160, 620));

        pnlLoadingPage.setBackground(new java.awt.Color(0, 0, 0));
        pnlLoadingPage.setMaximumSize(new java.awt.Dimension(1150, 620));
        pnlLoadingPage.setMinimumSize(new java.awt.Dimension(1150, 620));
        pnlLoadingPage.setPreferredSize(new java.awt.Dimension(1150, 620));
        pnlLoadingPage.setSize(new java.awt.Dimension(1150, 620));

        jProgressBar1.setBackground(new java.awt.Color(0, 0, 0));
        jProgressBar1.setForeground(new java.awt.Color(255, 255, 255));

        lblBackgroundImage.setBackground(new java.awt.Color(255, 255, 255));
        lblBackgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/tollmanagementsystem/resources/toll2.png"))); // NOI18N
        lblBackgroundImage.setMaximumSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setMinimumSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setPreferredSize(new java.awt.Dimension(450, 250));
        lblBackgroundImage.setSize(new java.awt.Dimension(450, 250));

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Your journey, streamlined-tolls made easy and fast");

        lblLoadingBar.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        lblLoadingBar.setForeground(new java.awt.Color(255, 255, 255));
        lblLoadingBar.setText("Loading ....");

        javax.swing.GroupLayout pnlLoadingPageLayout = new javax.swing.GroupLayout(pnlLoadingPage);
        pnlLoadingPage.setLayout(pnlLoadingPageLayout);
        pnlLoadingPageLayout.setHorizontalGroup(
            pnlLoadingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlLoadingPageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lblBackgroundImage, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE)
        );
        pnlLoadingPageLayout.setVerticalGroup(
            pnlLoadingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlLoadingPageLayout.createSequentialGroup()
                .addComponent(lblBackgroundImage, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblLoadingBar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1160, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlLoadingPage, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 632, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(pnlLoadingPage, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * Initializes the toll list with sample toll entries.
     * This method creates a new LinkedList to store toll entries
     * and populates it with predefined sample data for testing purposes.
 
     */
    private void initializeData() {
        tollList = new LinkedList<>();

        // Registering sample Citizens with 4-digit vehicle numbers
        registerToll(new TollModel(123456789,"Sanjay Sharma",987654321,1234,"SUV","123 Thamel, Kathmandu, Nepal","Gandaki",
                    "Tribhuvan International Airport Toll Plaza","Kathmandu, Nepal"));
        
        registerToll(new TollModel(123456788,"Anita Gurung",987654322,5678,"Car","456 Bhadgaon, Bhaktapur, Nepal","Bagmati",
                    "Madhyapur Thimi Toll Plaza","Bhaktapur, Nepal"));
        
        registerToll(new TollModel(123456787,"Rajesh Koirala",987654323,9012,"Truck","789 Sundarijal, Kathmandu, Nepal","Bagmati",
                    "Sundarijal Toll Plaza","Kathmandu, Nepal"));
    }
    
    /**
    * Registers a new toll entry by adding it to the toll list.
    *
    * @param toll the TollModel object representing the toll entry to be registered
    */
    private void registerToll(TollModel toll) {
        tollList.add(toll);
        
        // Get the table model from the JTable
        DefaultTableModel model = (DefaultTableModel) jtInformation.getModel(); 
    
        // Add a new row to the table with the toll data
        model.addRow(new Object[]{
            toll.getLicenseNumber(), 
            toll.getCitizenName(),   
            toll.getCitizenshipNumber(), 
            toll.getVehicleNumber(),
            toll.getVehicleCategory(), 
            toll.getAddress(),         
            toll.getState(),
            toll.getTollPlazaName(),
            toll.getTollPlazaLocation()
        });
    }
    
    private void txtFldUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldUserNameActionPerformed
        // Retrieve the username from the text field
        String username = txtFldUserName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the username
        if (username.isEmpty()) {
          // Show an error message if the username is empty
            txtFldUserName.setText("Username cannot be empty.");
            txtFldUserName.setForeground(Color.RED); // Set the error message color
            txtFldUserName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (username.length() < 3 || username.length() > 15) {
            // Check for length constraints
            txtFldUserName.setText("Username must be between 3 and 15 characters.");
            txtFldUserName.setForeground(Color.RED);
            txtFldUserName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            txtFldUserName.setText(""); // Clear the error message
            txtFldUserName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // highlight valid input
        }
    }//GEN-LAST:event_txtFldUserNameActionPerformed

    private void pwdFldPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldPasswordActionPerformed
        // Retrieve the password from the password field
    String password = new String(pwdFldPassword.getPassword()).trim(); // Trim to remove leading/trailing spaces

    // Validate the password
    if (password.isEmpty()) {
        pwdFldPassword.setText("Password cannot be empty.");
        pwdFldPassword.setForeground(Color.RED); // Set the error message color
        pwdFldPassword.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the password field
    } else if (password.length() < 8) {
        // Check for length constraints
        pwdFldPassword.setText("Password must be at least 8 characters.");
        pwdFldPassword.setForeground(Color.RED);
        pwdFldPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
    } else {
        // If valid, clear the error message and reset the border
        pwdFldPassword.setText(""); // Clear the error message
        pwdFldPassword.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
    }
    }//GEN-LAST:event_pwdFldPasswordActionPerformed

    private void btnSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignInActionPerformed
        String username = txtFldUserName.getText().trim();
        String password = new String(pwdFldPassword.getPassword());
        
        if(username.equals("admin") && password.equals("password")){
            //Hide the login page
            pnlLoginPage.setVisible(false);
            
            //Show the loading page
            pnlPages.setVisible(true);
        }else{
            //check which credential is incorrect
            if (!username.equals("admin") && !password.equals("password")){
                //Both username and password are incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid username and passsword","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }else if(!username.equals("admin")){
                //Username is incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid username","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }else if(!password.equals("password")){
                //Password is incorrect
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid passsword","Login Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            }
    }//GEN-LAST:event_btnSignInActionPerformed

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        //Hide the main page on clicking log out button
        pnlPages.setVisible(false);
        //Show the login page
        pnlLoginPage.setVisible(true);
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void txtFldAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldAddressActionPerformed
        // Retrieve the address from the text field
        String address = txtFldAddress.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the address
        if (address.isEmpty()) {
            lblErrorMsgAddress.setText("Address cannot be empty.");
            lblErrorMsgAddress.setForeground(Color.RED); // Set the error message color
            lblErrorMsgAddress.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (address.length() < 5) {
            // Check for minimum length
            lblErrorMsgAddress.setText("Address must be at least 5 characters long.");
            lblErrorMsgAddress.setForeground(Color.RED);
            lblErrorMsgAddress.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgAddress.setText(""); // Clear the error message
            lblErrorMsgAddress.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input    
        }
    }//GEN-LAST:event_txtFldAddressActionPerformed

    private void txtFldPlazaLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldPlazaLocationActionPerformed
        // Retrieve the plaza location from the text field
        String plazaLocation = txtFldPlazaLocation.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the plaza location
        if (plazaLocation.isEmpty()) {
            lblErrorMsgPlazaLocation.setText("Plaza location cannot be empty.");
            lblErrorMsgPlazaLocation.setForeground(Color.RED); // Set the error message color
            lblErrorMsgPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (plazaLocation.length() < 5) {
            // Check for minimum length
            lblErrorMsgPlazaLocation.setText("Plaza location must be at least 5 characters long.");
            lblErrorMsgPlazaLocation.setForeground(Color.RED);
            lblErrorMsgPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid
            lblErrorMsgPlazaLocation.setText(""); // Clear the error message
            lblErrorMsgPlazaLocation.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input   
        }
    }//GEN-LAST:event_txtFldPlazaLocationActionPerformed

    private void txtFldLicenseNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLicenseNumberActionPerformed
        // Retrieve the license number from the text field
        String licenseNumber = txtFldLicenseNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the license number
        if (licenseNumber.isEmpty()) {
            lblErrorMsgLicenseNumber.setText("License number cannot be empty.");
            lblErrorMsgLicenseNumber.setForeground(Color.RED); // Set the error message color
            lblErrorMsgLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!licenseNumber.matches("\\d{7}")) { // Example: Check if it is a 7-digit number
            lblErrorMsgLicenseNumber.setText("License number must be a 7-digit number.");
            lblErrorMsgLicenseNumber.setForeground(Color.RED);
            lblErrorMsgLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid,
            lblErrorMsgLicenseNumber.setText(""); // Clear the error message
            lblErrorMsgLicenseNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input  
        }
    }//GEN-LAST:event_txtFldLicenseNumberActionPerformed

    private void txtFldCitizenNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldCitizenNameActionPerformed
        // Retrieve the citizen name from the text field
        String citizenName = txtFldCitizenName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the citizen name
        if (citizenName.isEmpty()) {
            lblErrorMsgCitizenName.setText("Citizen name cannot be empty.");
            lblErrorMsgCitizenName.setForeground(Color.RED); // Set the error message color
            lblErrorMsgCitizenName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (citizenName.length() < 3) {
            // Check for minimum length
            lblErrorMsgCitizenName.setText("Citizen name must be at least 3 characters long.");
            lblErrorMsgCitizenName.setForeground(Color.RED);
            lblErrorMsgCitizenName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, 
            lblErrorMsgCitizenName.setText(""); // Clear the error message
            lblErrorMsgCitizenName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_txtFldCitizenNameActionPerformed

    private void txtFldCitizenshipNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldCitizenshipNumberActionPerformed
        // Retrieve the citizenship number from the text field
        String citizenshipNumber = txtFldCitizenshipNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the citizenship number
        if (citizenshipNumber.isEmpty()) {
            lblErrorMsgCitizenshipNumber.setText("Citizenship number cannot be empty.");
            lblErrorMsgCitizenshipNumber.setForeground(Color.RED); // Set the error message color
            lblErrorMsgCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!citizenshipNumber.matches("\\d{10}")) { // Example: Check if it is a 10-digit number
            lblErrorMsgCitizenshipNumber.setText("Citizenship number must be a 10-digit number.");
            lblErrorMsgCitizenshipNumber.setForeground(Color.RED);
            lblErrorMsgCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgCitizenshipNumber.setText(""); // Clear the error message
            lblErrorMsgCitizenshipNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_txtFldCitizenshipNumberActionPerformed

    private void txtFldVehicleNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldVehicleNumberActionPerformed
        // Retrieve the vehicle number from the text field
        String vehicleNumber = txtFldVehicleNumber.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the vehicle number
        if (vehicleNumber.isEmpty()) {
            lblErrorMsgVehicleNumber.setText("Vehicle number cannot be empty.");
            lblErrorMsgVehicleNumber.setForeground(Color.RED); // Set the error message color
            lblErrorMsgVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (!vehicleNumber.matches("[A-Z]{2}\\d{2}[A-Z]{2}\\d{4}")) { // Example: Validate format (e.g., AB12CD3456)
            lblErrorMsgVehicleNumber.setText("Vehicle number must be in the format AB12CD3456.");
            lblErrorMsgVehicleNumber.setForeground(Color.RED);
            lblErrorMsgVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgVehicleNumber.setText(""); // Clear the error message
            lblErrorMsgVehicleNumber.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_txtFldVehicleNumberActionPerformed
    
    private void txtFldStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldStateActionPerformed
        // Retrieve the state from the text field
        String state = txtFldState.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the state input
        if (state.isEmpty()) {
            lblErrorMsgState.setText("State cannot be empty.");
            lblErrorMsgState.setForeground(Color.RED); // Set the error message color
            lblErrorMsgState.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (state.length() < 2) {
            // Check for minimum length
            lblErrorMsgState.setText("State must be at least 2 characters long.");
            lblErrorMsgState.setForeground(Color.RED);
            lblErrorMsgState.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgState.setText(""); // Clear the error message
            lblErrorMsgState.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_txtFldStateActionPerformed

    private void txtFldPlazaNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldPlazaNameActionPerformed
        // Retrieve the plaza name from the text field
        String plazaName = txtFldPlazaName.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the plaza name
        if (plazaName.isEmpty()) {
            lblErrorMsgPlazaName.setText("Plaza name cannot be empty.");
            lblErrorMsgPlazaName.setForeground(Color.RED); // Set the error message color
            lblErrorMsgPlazaName.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (plazaName.length() < 3) {
            // Check for minimum length
            lblErrorMsgPlazaName.setText("Plaza name must be at least 3 characters long.");
            lblErrorMsgPlazaName.setForeground(Color.RED);
            lblErrorMsgPlazaName.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgPlazaName.setText(""); // Clear the error message
            lblErrorMsgPlazaName.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }
    }//GEN-LAST:event_txtFldPlazaNameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        
        boolean isValid = true;
        
        // Validate License Number
        isValid &= validateField(
                txtFldLicenseNumber, "License Number", lblErrorMsgLicenseNumber, "Must be 9 digit integer.",
                errorColor, greenColor, ValidationUtil.isValidLicenseNumber(txtFldLicenseNumber.getText())
        );

        // Validate Citizen Name
        isValid &= validateField(
                txtFldCitizenName, "Customer Name", lblErrorMsgCitizenName, "Must contain only alphabets.",
                errorColor, greenColor, ValidationUtil.isValidName(txtFldCitizenName.getText())
        );

        // Validate Citizenship Number
        isValid &= validateField(
                txtFldCitizenshipNumber, "Citizenship Number", lblErrorMsgCitizenshipNumber, "Must be 7 digit integer.",
                errorColor, greenColor, ValidationUtil.isValidCitizenshipNumber(txtFldCitizenshipNumber.getText())
        );

        // Validate Vehicle Number
        isValid &= validateField(
                txtFldVehicleNumber, "Vehicle Number", lblErrorMsgVehicleNumber, "Must be a valid vehicle number.",
                errorColor, greenColor, ValidationUtil.isValidVehicleNumber(txtFldVehicleNumber.getText())
        );

        // Validate Vehicle Category
        isValid &= validateField(
                txtFldVehicleCategory,"Vehicle Category", lblErrorMsgVehicleCategory, "Must not be empty.",
                errorColor, greenColor, !txtFldVehicleCategory.getText().trim().isEmpty()
        );

        // Validate Toll Plaza Name
        isValid &= validateField(
                txtFldPlazaName, "Toll Plaza Name", lblErrorMsgPlazaName, "Must not be empty.",
                errorColor, greenColor, !txtFldPlazaName.getText().trim().isEmpty()
        );

        // Validate Toll Plaza Location
        isValid &= validateField(
                txtFldPlazaLocation, "Toll Plaza Location", lblErrorMsgPlazaLocation, "Must not be empty.",
                errorColor, greenColor, !txtFldPlazaLocation.getText().trim().isEmpty()
        );

        // Validate Address
        isValid &= validateField(
                txtFldAddress, "Address", lblErrorMsgAddress, "Must not be empty.",
                errorColor, greenColor, !txtFldAddress.getText().trim().isEmpty()
        );

        // Validate State
        isValid &= validateField(
                txtFldState, "State", lblErrorMsgState, "Must not be empty.",
                errorColor, greenColor, !txtFldState.getText().trim().isEmpty()
        );

        if (isValid) {
            // Create a TollModel instance
            TollModel newToll = new TollModel(
                    Integer.parseInt(txtFldLicenseNumber.getText().trim()),
                    txtFldCitizenName.getText().trim(),
                    Integer.parseInt(txtFldCitizenshipNumber.getText().trim()),
                    Integer.parseInt(txtFldVehicleNumber.getText().trim()),
                    txtFldVehicleCategory.getText().trim(),
                    txtFldPlazaName.getText().trim(),
                    txtFldPlazaLocation.getText().trim(),
                    txtFldAddress.getText().trim(),
                    txtFldState.getText().trim()
            );

            // Check for duplicate License Number
            if (checkDuplicateToll(newToll)) {
                txtFldLicenseNumber.setBorder(createTitledBorder(errorColor, "License Number"));
                showDialogBox("License Number already exists.", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
            } else {
                // Add the toll entry if no duplicate is found
                tollList.add(newToll);
                clearTollForm(); // Method to clear the input fields
                loadListToTable(tollList);
                txtFldLicenseNumber.setBorder(createTitledBorder(greenColor, "License Number"));
                showDialogBox("Toll entry added successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
    * Checks whether a toll entry with the same License Number already exists in the
    * toll list.
    *
    * @param toll the TollModel object to check for duplicate License Number
    * @return true if a duplicate License Number is found, false otherwise
    */
    private boolean checkDuplicateToll(TollModel toll) {
        return tollList.stream()
                .anyMatch(existingToll
                        -> existingToll.getLicenseNumber() == toll.getLicenseNumber());
}

    /**
    * Creates a custom TitledBorder with a specified colour and title for input fields
    * in the toll management system. This helps visually indicate validation states 
    * or categorize fields (e.g., License Plate, Toll Amount).
    *
    * @param color the colour for the border and title
    * @param title the title text for the border (e.g., "License Plate", "Toll Amount")
    * @return a TitledBorder instance styled with the provided colour and title
    */
    private javax.swing.border.TitledBorder createTitledBorder(Color color, String title) {
        return javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(color, 2), // 2-pixel line border
                title, // Title for the field
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, // Default title alignment
                javax.swing.border.TitledBorder.DEFAULT_POSITION, // Default position (above the border)
                new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12), // Font styling for the title
                color // Title text color
        );
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        boolean isValid = true;

        // Validate fields (same as the Add button)
        isValid &= validateField(
                txtFldLicenseNumber, "License Number", lblErrorMsgLicenseNumber, "Must be a valid license number.",
                errorColor, greenColor, ValidationUtil.isValidLicenseNumber(txtFldLicenseNumber.getText())
        );
        isValid &= validateField(
                txtFldCitizenName, "Citizen Name", lblErrorMsgCitizenName, "Must contain only alphabets.",
                errorColor, greenColor, ValidationUtil.isValidName(txtFldCitizenName.getText())
        );
        isValid &= validateField(
                txtFldCitizenshipNumber, "Citizenship Number", lblErrorMsgCitizenshipNumber, "Must be a valid number.",
                errorColor, greenColor, ValidationUtil.isValidCitizenshipNumber(txtFldCitizenshipNumber.getText())
        );
        isValid &= validateField(
                txtFldVehicleNumber, "Vehicle Number", lblErrorMsgVehicleNumber, "Must be a valid vehicle number.",
                errorColor, greenColor, ValidationUtil.isValidVehicleNumber(txtFldVehicleNumber.getText())
        );
        isValid &= validateField(
                txtFldPlazaLocation, "Plaza Location", lblErrorMsgPlazaLocation, "Must contain valid characters.",
                errorColor, greenColor, ValidationUtil.isValidTollPlazaLocation(txtFldPlazaLocation.getText())
        );
        isValid &= validateField(
                txtFldState, "State", lblErrorMsgState, "Must contain valid characters.",
                errorColor, greenColor, ValidationUtil.isValidState(txtFldState.getText())
        );
        isValid &= validateField(
                txtFldPlazaName, "Plaza Name", lblErrorMsgPlazaName, "Must contain valid characters.",
                errorColor, greenColor, ValidationUtil.isValidTollPlazaName(txtFldPlazaName.getText())
        );
        isValid &= validateField(
                txtFldVehicleCategory, "Vehicle Category", lblErrorMsgVehicleCategory, "Must be a valid category.",
                errorColor, greenColor, ValidationUtil.isValidVehicleCategory(txtFldVehicleCategory.getText())
        );
        isValid &= validateField(
                txtFldAddress, "Address", lblErrorMsgAddress, "Must contain valid characters.",
                errorColor, greenColor, ValidationUtil.isValidAddress(txtFldAddress.getText())
        );

        //Get table model
        DefaultTableModel tableModel = (DefaultTableModel) jtInformation.getModel();
        if (jtInformation.getSelectedRowCount() == 1) {

            try {
                int selectedRow = jtInformation.getSelectedRow();

                // Retrieve existing values for fields that are not being updated
                Object licenseNumber = tableModel.getValueAt(selectedRow, 0);
                Object citizenName = tableModel.getValueAt(selectedRow, 1);
                Object citizenshipNumber = tableModel.getValueAt(selectedRow, 2);
                Object vehicleNumber = tableModel.getValueAt(selectedRow, 3);
                Object plazaLocation = tableModel.getValueAt(selectedRow, 4);
                Object state = tableModel.getValueAt(selectedRow, 5);
                Object plazaName = tableModel.getValueAt(selectedRow, 6);
                Object vehicleCategory = tableModel.getValueAt(selectedRow, 7);
                Object address = tableModel.getValueAt(selectedRow, 8);

                // Update only if the corresponding input field is not empty
                if (!txtFldLicenseNumber.getText().trim().isEmpty()) {
                    licenseNumber = txtFldLicenseNumber.getText().trim();
                }
                if (!txtFldCitizenName.getText().trim().isEmpty()) {
                    citizenName = txtFldCitizenName.getText().trim();
                }
                if (!txtFldCitizenshipNumber.getText().trim().isEmpty()) {
                    citizenshipNumber = txtFldCitizenshipNumber.getText().trim();
                }
                if (!txtFldVehicleNumber.getText().trim().isEmpty()) {
                    vehicleNumber = txtFldVehicleNumber.getText().trim();
                }
                if (!txtFldPlazaLocation.getText().trim().isEmpty()) {
                    plazaLocation = txtFldPlazaLocation.getText().trim();
                }
                if (!txtFldState.getText().trim().isEmpty()) {
                    state = txtFldState.getText().trim();
                }
                if (!txtFldPlazaName.getText().trim().isEmpty()) {
                    plazaName = txtFldPlazaName.getText().trim();
                }
                if (!txtFldVehicleCategory.getText().trim().isEmpty()) {
                    vehicleCategory = txtFldVehicleCategory.getText().trim();
                }
                if (!txtFldAddress.getText().trim().isEmpty()) {
                    address = txtFldAddress.getText().trim();
                }

                // Update the table with the new values
                tableModel.setValueAt(licenseNumber, selectedRow, 0);
                tableModel.setValueAt(citizenName, selectedRow, 1);
                tableModel.setValueAt(citizenshipNumber, selectedRow, 2);
                tableModel.setValueAt(vehicleNumber, selectedRow, 3);
                tableModel.setValueAt(plazaLocation, selectedRow, 4);
                tableModel.setValueAt(state, selectedRow, 5);
                tableModel.setValueAt(plazaName, selectedRow, 6);
                tableModel.setValueAt(vehicleCategory, selectedRow, 7);
                tableModel.setValueAt(address, selectedRow, 8);

                JOptionPane.showMessageDialog(this, "Updated Successfully");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input! Please enter valid numbers for Citizenship Number.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if (jtInformation.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is empty");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a single row to update data.");
            }
        }
    }

    
    
    // Example method to simulate data update
    private boolean updateData(String plazaName, String state, String vehicleNumber, String vehicleCategory, String address, int citizenshipNumber, String citizenName, int licenseNumber, String plazaLocation) {
        // Return true if successful, false otherwise
        return true; // Placeholder
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // Set the text of each text field to an empty string
        txtFldAddress.setText("");
        txtFldCitizenshipNumber.setText("");
        txtFldCitizenName.setText("");
        txtFldLicenseNumber.setText("");
        txtFldPlazaLocation.setText("");
        txtFldPlazaName.setText("");
        txtFldState.setText("");
        txtFldVehicleNumber.setText("");
        txtFldVehicleCategory.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Delete Button Functionality
        DefaultTableModel tableModel = (DefaultTableModel) jtInformation.getModel();

        // Check if a single row is selected for deletion
        if (jtInformation.getSelectedRowCount() == 1) {
            // Get selected row index
            int selectedRow = jtInformation.getSelectedRow();

            // Remove the selected row from the table
            tableModel.removeRow(selectedRow);

            // Show success message
            JOptionPane.showMessageDialog(this, "Data deleted successfully.");
        } else {
            // If no rows are selected or multiple rows are selected
            if (jtInformation.getRowCount() == 0) {
                // If the table is empty
                JOptionPane.showMessageDialog(this, "Table is empty.");
            } else {
                // If no row or multiple rows are selected
                JOptionPane.showMessageDialog(this, "Please select a single row to delete.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtFldVehicleCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldVehicleCategoryActionPerformed
        // Retrieve the vehicle category from the text field
        String vehicleCategory = txtFldVehicleCategory.getText().trim(); // Trim to remove leading/trailing spaces

        // Validate the vehicle category input
        if (vehicleCategory.isEmpty()) {
            lblErrorMsgVehicleCategory.setText("Vehicle category cannot be empty.");
            lblErrorMsgVehicleCategory.setForeground(Color.RED); // Set the error message color
            lblErrorMsgVehicleCategory.setBorder(BorderFactory.createLineBorder(Color.RED)); // Highlight the text field
        } else if (vehicleCategory.length() < 3) {
            // Check for minimum length
            lblErrorMsgVehicleCategory.setText("Vehicle category must be at least 3 characters long.");
            lblErrorMsgVehicleCategory.setForeground(Color.RED);
            lblErrorMsgVehicleCategory.setBorder(BorderFactory.createLineBorder(Color.RED));
        } else {
            // If valid, clear the error message and reset the border
            lblErrorMsgVehicleCategory.setText(""); // Clear the error message
            lblErrorMsgVehicleCategory.setBorder(BorderFactory.createLineBorder(Color.GREEN)); // Optional: highlight valid input
        }

    }//GEN-LAST:event_txtFldVehicleCategoryActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        SelectionSort selectionSort = new SelectionSort();
        List<TollModel> sortedList = selectionSort.sortByCitizenName(tollList, true);
        BinarySearch search = new BinarySearch();
        TollModel searchedData = search.searchByName(txtFldSearch.getText().trim(), sortedList, 0, sortedList.size()-1);
        if(searchedData!=null){
            System.out.println(searchedData.getCitizenName());
        }else{
            System.out.println("Sorry");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSortByCitizenshipNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByCitizenshipNumberActionPerformed
        SelectionSort selectionSort = new SelectionSort();
        loadListToTable(selectionSort.sortByCitizenshipNumber(tollList, false));
    }//GEN-LAST:event_btnSortByCitizenshipNumberActionPerformed

    /**
    * Populates the JTable with the current list of toll records. Clears
    * existing rows in the table model before adding new data.
    */
    private void loadListToTable(List<TollModel> tollList) {
        DefaultTableModel model = (DefaultTableModel) jtInformation.getModel(); 

        // Clear existing rows if needed
        model.setRowCount(0);

        // Populate the table with toll data
        tollList.forEach(toll -> model.addRow(new Object[]{
            toll.getLicenseNumber(),
            toll.getCitizenName(),
            toll.getCitizenshipNumber(),
            toll.getVehicleNumber(),
            toll.getVehicleCategory(),
            toll.getAddress(),
            toll.getState(),
            toll.getTollPlazaName(),
            toll.getTollPlazaLocation()
        }));
    }

    
    /**
    * Validates a single input field based on specific criteria and updates its
    * visual state.
    *
    * @param textField the JTextField to validate
    * @param fieldName the name of the field for error display
    * @param errorLbl the JLabel to display error messages
    * @param errorMsg the error message to display for invalid input
    * @param errorColor the colour for error borders and text
    * @param successColor the colour for successful validation borders
    * @param isValidFormat whether the input satisfies the field-specific
    * validation criteria
    * @return true if the field passes validation, false otherwise
    */
    private boolean validateField(JTextField textField, String fieldName, JLabel errorLbl, String errorMsg, Color errorColor, Color successColor, boolean isValidFormat) {
        if (ValidationUtil.isNullOrEmpty(textField.getText())) {
            // Highlight the field and show an error message for empty input
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(fieldName + " cannot be empty!");
            errorLbl.setVisible(true);
            return false;
        } else if (!isValidFormat) {
            // Highlight the field and show a specific error message for invalid input
            textField.setBorder(createTitledBorder(errorColor, fieldName));
            errorLbl.setText(errorMsg);
            errorLbl.setVisible(true);
            return false;
        } else {
            // Indicate successful validation
            textField.setBorder(createTitledBorder(successColor, fieldName));
            errorLbl.setVisible(false);
            return true;
        }
    }


    /**
         * Displays a message dialog box with the given message, title, and type.
        *
        * @param message the message to display
        * @param title the title of the dialog box
        * @param messageType the type of message (e.g., information, warning, or
        * error)
        */
        private void showDialogBox(String message, String title, int messageType) {
            JOptionPane.showMessageDialog(this, message, title, messageType);
        }
        
        /**
        * Clears all input fields in the toll form. Resets each field's value to
        * an empty string.
        */
        private void clearTollForm() {
            txtFldAddress.setText("");
            txtFldCitizenshipNumber.setText("");
            txtFldCitizenName.setText("");
            txtFldLicenseNumber.setText("");
            txtFldPlazaLocation.setText("");
            txtFldPlazaName.setText("");
            txtFldState.setText("");
            txtFldVehicleNumber.setText("");
        }

    public static void main(String args[]) {
        
       
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TollManagementSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TollManagementSystem system = new TollManagementSystem();
        
        //set up cardlayout
        CardLayout cardlayout = new CardLayout();
        system.getContentPane().setLayout(cardlayout);
        
        // Add panels to CardLayout
        system.getContentPane().add(system.pnlLoadingPage, "LoadingPage");
        system.getContentPane().add(system.pnlLoginPage, "LoginPage");
        system.getContentPane().add(system.pnlPages,"Pages");
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                system.setVisible(true);
            }
        });
        try{
            for(int i=0; i<=100; i++){
                Thread.sleep(30);
                system.jProgressBar1.setValue(i);
            }
            // After progress completes
            java.awt.EventQueue.invokeLater(() -> {
            system.pnlLoadingPage.setVisible(false);  // Hide loading page
            system.pnlLoginPage.setVisible(true);     // Show login page
                });
            }catch(Exception e){
            
        } 
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSignIn;
    private javax.swing.JButton btnSortByCitizenshipNumber;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpDashboard;
    private javax.swing.JPanel jpHomePage;
    private javax.swing.JScrollPane jspTableContents;
    private javax.swing.JTable jtInformation;
    private javax.swing.JTabbedPane jtpPages;
    private javax.swing.JLabel lblBackgroundImage;
    private javax.swing.JLabel lblErrorMsgAddress;
    private javax.swing.JLabel lblErrorMsgCitizenName;
    private javax.swing.JLabel lblErrorMsgCitizenshipNumber;
    private javax.swing.JLabel lblErrorMsgLicenseNumber;
    private javax.swing.JLabel lblErrorMsgPlazaLocation;
    private javax.swing.JLabel lblErrorMsgPlazaName;
    private javax.swing.JLabel lblErrorMsgState;
    private javax.swing.JLabel lblErrorMsgVehicleCategory;
    private javax.swing.JLabel lblErrorMsgVehicleNumber;
    private javax.swing.JLabel lblForgetPassword;
    private javax.swing.JLabel lblHomeImage;
    private javax.swing.JLabel lblLoadingBar;
    private javax.swing.JLabel lblLogin;
    private javax.swing.JLabel lblLoginImage;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPasswordImage;
    private javax.swing.JLabel lblPhrase;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblTitle3;
    private javax.swing.JLabel lblTitlePages;
    private javax.swing.JLabel lblUserImage;
    private javax.swing.JPanel pnlContext;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JPanel pnlImage;
    private javax.swing.JPanel pnlLoadingPage;
    private javax.swing.JPanel pnlLoginDetails;
    private javax.swing.JPanel pnlLoginPage;
    private javax.swing.JPanel pnlPages;
    private javax.swing.JPanel pnlTextFields;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JPasswordField pwdFldPassword;
    private javax.swing.JTextArea taInformation;
    private javax.swing.JTextField txtFldAddress;
    private javax.swing.JTextField txtFldCitizenName;
    private javax.swing.JTextField txtFldCitizenshipNumber;
    private javax.swing.JTextField txtFldLicenseNumber;
    private javax.swing.JTextField txtFldPlazaLocation;
    private javax.swing.JTextField txtFldPlazaName;
    private javax.swing.JTextField txtFldSearch;
    private javax.swing.JTextField txtFldState;
    private javax.swing.JTextField txtFldUserName;
    private javax.swing.JTextField txtFldVehicleCategory;
    private javax.swing.JTextField txtFldVehicleNumber;
    // End of variables declaration//GEN-END:variables

    

}
